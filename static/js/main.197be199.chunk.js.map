{"version":3,"sources":["keycodes.js","constants.js","snake.js","Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["keyCodes","backspace","tab","enter","shift","ctrl","alt","pauseBreak","capsLock","escape","pageUp","Space","pageDown","end","home","arrowLeft","arrowUp","arrowRight","arrowDown","printScreen","insert","delete","0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","leftWindowKey","rightWindowKey","selectKey","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","add","subtract","decimalPoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","numLock","scrollLock","MyComputer","MyCalculator","semiColon","equalSign","comma","dash","period","forwardSlash","openBracket","backSlash","closeBraket","singleQuote","RIGHT_BORDER","BOTTOM_BORDER","PLAYER_SIZE","DIRECTIONS","GAME_STATE","Snake","ctx","players","seed","initialState","gameStatus","winner","player","currentPoints","color","direction","speed","positions","player2","food","state","JSON","parse","stringify","this","initialized","getStateTensor","array","Array","BORDER_SIZE","fill","map","forEach","position","flat","tf","LEFT_BORDER","TOP_BORDER","length","isInverseDirection","initialize","distanceBetweenHeads","Math","sqrt","headCollision","console","log","getOtherPlayer","hasCollisions","getCurrentLooser","otherPlayer","updateTail","index","moveUp","moveDown","moveLeft","moveRight","autoMove","pauseGame","clearInterval","gameTimer","startGame","setInterval","update","seedrandom","generateFoodPosition","continueGame","stopGame","result","getPlayersLength","p1","p2","restartGame","clearRect","canvas","width","height","draw","getStatus","getPoints","eatFood","foodInSnake","getWinner","getRandomCirclePosition","drawFood","circle","Path2D","arc","fillStyle","drawPlayer","rectangle","rect","changeDirection","max","rand","floor","random","socket","io","game","Canvas","props","useState","setCurrentPlayer","setWinner","setGameStatus","time","setTime","timerStatus","setTimerStatus","points","setPoints","canvasRef","useRef","useEffect","on","message","removeListener","emit","timer1","timer2","current","getContext","handleKeys","onKeyEvent","key","keyCode","keys","handleEventType","className","onClick","ref","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.197be199.chunk.js","sourcesContent":["const keyCodes = {\r\n  backspace: 8,\r\n  tab: 9,\r\n  enter: 13,\r\n  shift: 16,\r\n  ctrl: 17,\r\n  alt: 18,\r\n  pauseBreak: 19,\r\n  capsLock: 20,\r\n  escape: 27,\r\n  pageUp: 33,\r\n  Space: 32,\r\n  pageDown: 34,\r\n  end: 35,\r\n  home: 36,\r\n  arrowLeft: 37,\r\n  arrowUp: 38,\r\n  arrowRight: 39,\r\n  arrowDown: 40,\r\n  printScreen: 44,\r\n  insert: 45,\r\n  delete: 46,\r\n  0: 48,\r\n  1: 49,\r\n  2: 50,\r\n  3: 51,\r\n  4: 52,\r\n  5: 53,\r\n  6: 54,\r\n  7: 55,\r\n  8: 56,\r\n  9: 57,\r\n  a: 65,\r\n  b: 66,\r\n  c: 67,\r\n  d: 68,\r\n  e: 69,\r\n  f: 70,\r\n  g: 71,\r\n  h: 72,\r\n  i: 73,\r\n  j: 74,\r\n  k: 75,\r\n  l: 76,\r\n  m: 77,\r\n  n: 78,\r\n  o: 79,\r\n  p: 80,\r\n  q: 81,\r\n  r: 82,\r\n  s: 83,\r\n  t: 84,\r\n  u: 85,\r\n  v: 86,\r\n  w: 87,\r\n  x: 88,\r\n  y: 89,\r\n  z: 90,\r\n  leftWindowKey: 91,\r\n  rightWindowKey: 92,\r\n  selectKey: 93,\r\n  numpad0: 96,\r\n  numpad1: 97,\r\n  numpad2: 98,\r\n  numpad3: 99,\r\n  numpad4: 100,\r\n  numpad5: 101,\r\n  numpad6: 102,\r\n  numpad7: 103,\r\n  numpad8: 104,\r\n  numpad9: 105,\r\n  multiply: 106,\r\n  add: 107,\r\n  subtract: 109,\r\n  decimalPoint: 110,\r\n  divide: 111,\r\n  f1: 112,\r\n  f2: 113,\r\n  f3: 114,\r\n  f4: 115,\r\n  f5: 116,\r\n  f6: 117,\r\n  f7: 118,\r\n  f8: 119,\r\n  f9: 120,\r\n  f10: 121,\r\n  f11: 122,\r\n  f12: 123,\r\n  numLock: 144,\r\n  scrollLock: 145,\r\n  MyComputer: 182,\r\n  MyCalculator: 183,\r\n  semiColon: 186,\r\n  equalSign: 187,\r\n  comma: 188,\r\n  dash: 189,\r\n  period: 190,\r\n  forwardSlash: 191,\r\n  openBracket: 219,\r\n  backSlash: 220,\r\n  closeBraket: 221,\r\n  singleQuote: 222,\r\n};\r\n\r\nexport default keyCodes;\r\n","// const canvas = document.getElementById(\"canvas\");\r\nexport const RIGHT_BORDER = 250;\r\nexport const BOTTOM_BORDER = 250;\r\nexport const BORDER_SIZE = 250;\r\nexport const TOP_BORDER = 0;\r\nexport const LEFT_BORDER = 0;\r\nexport const PLAYER_SIZE = 10;\r\nexport const DIRECTIONS = {\r\n  LEFT: \"LEFT\",\r\n  RIGHT: \"RIGHT\",\r\n  UP: \"UP\",\r\n  DOWN: \"DOWN\",\r\n};\r\nexport const GAME_STATE = {\r\n  PLAY: \"PLAY\",\r\n  PAUSE: \"PAUSE\",\r\n  STOP: \"STOP\",\r\n  END: \"END\",\r\n};\r\n","import {\r\n  BOTTOM_BORDER,\r\n  DIRECTIONS,\r\n  PLAYER_SIZE,\r\n  RIGHT_BORDER,\r\n  LEFT_BORDER,\r\n  TOP_BORDER,\r\n  GAME_STATE,\r\n  BORDER_SIZE,\r\n} from \"./constants.js\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as seedrandom from \"seedrandom\";\r\nexport class Snake {\r\n  players = [\"player\", \"player2\"];\r\n  seed = 0;\r\n  initialState = {\r\n    gameStatus: GAME_STATE.PAUSE,\r\n    winner: \"none\", // one of \"none\", \"player\", \"player2\"\r\n    player: {\r\n      currentPoints: 0,\r\n      color: \"#2196f3\",\r\n      direction: DIRECTIONS.RIGHT,\r\n      speed: 10,\r\n      positions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n        },\r\n      ],\r\n    },\r\n    player2: {\r\n      currentPoints: 0,\r\n      color: \"#00b248\",\r\n      direction: DIRECTIONS.LEFT,\r\n      speed: 10,\r\n      positions: [\r\n        {\r\n          x: 250 - PLAYER_SIZE,\r\n          y: 250 - PLAYER_SIZE,\r\n        },\r\n      ],\r\n    },\r\n    food: {\r\n      x: 0,\r\n      y: 0,\r\n    },\r\n  };\r\n  state = JSON.parse(JSON.stringify(this.initialState));\r\n  initialized = false;\r\n  constructor(ctx) {\r\n    if (ctx) {\r\n      this.initialize(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current state as a tf.Tensor of shape [1, 2].\r\n   */\r\n  getStateTensor = () => {\r\n    let array = Array(BORDER_SIZE / 10)\r\n      .fill()\r\n      .map(() => Array(BORDER_SIZE / 10).fill(0));\r\n\r\n    this.state[\"player\"].positions.forEach((position) => {\r\n      array[position.x / 10][position.y / 10] = 1;\r\n    });\r\n    array = array.flat();\r\n\r\n    let tensor = tf.tensor2d(\r\n      [\r\n        ...array,\r\n        (this.state.food.x / 10 - LEFT_BORDER / 10) /\r\n          (RIGHT_BORDER / 10 - LEFT_BORDER / 10),\r\n        (this.state.food.y / 10 - TOP_BORDER / 10) /\r\n          (BOTTOM_BORDER / 10 - TOP_BORDER / 10),\r\n      ],\r\n      [1, array.length + 2] //array length for snake and 2 for food position\r\n    );\r\n    return tensor;\r\n  };\r\n\r\n  isInverseDirection = (player, direction) => {\r\n    switch (direction) {\r\n      case DIRECTIONS.RIGHT:\r\n        if (this.state[player].direction === DIRECTIONS.LEFT) {\r\n          return true;\r\n        }\r\n        break;\r\n      case DIRECTIONS.LEFT:\r\n        if (this.state[player].direction === DIRECTIONS.RIGHT) {\r\n          return true;\r\n        }\r\n        break;\r\n      case DIRECTIONS.UP:\r\n        if (this.state[player].direction === DIRECTIONS.DOWN) {\r\n          return true;\r\n        }\r\n        break;\r\n      case DIRECTIONS.DOWN:\r\n        if (this.state[player].direction === DIRECTIONS.UP) {\r\n          return true;\r\n        }\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    return false;\r\n  };\r\n  initialize = (ctx) => {\r\n    this.ctx = ctx;\r\n    // this.generateFoodPosition();\r\n    this.initialized = true;\r\n  };\r\n  distanceBetweenHeads = () => {\r\n    let x =\r\n      this.state.player.positions[0].x - this.state.player2.positions[0].x;\r\n    let y =\r\n      this.state.player.positions[0].y - this.state.player2.positions[0].y;\r\n    return Math.sqrt(x ** 2 + y ** 2);\r\n  };\r\n  headCollision = () => {\r\n    if (\r\n      (this.state.player.positions[0].x === this.state.player2.positions[0].x &&\r\n        this.state.player.positions[0].y ===\r\n          this.state.player2.positions[0].y) ||\r\n      (this.isInverseDirection(\"player\", this.state.player2.direction) &&\r\n        this.distanceBetweenHeads() === PLAYER_SIZE)\r\n    ) {\r\n      console.log(\"draw\");\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getOtherPlayer = (player) => {\r\n    if (player === \"player\") {\r\n      return \"player2\";\r\n    }\r\n    return \"player\";\r\n  };\r\n  /**\r\n   * Checks if there is collision with itself\r\n   * @returns {\"player\"|\"player2\"|\"none\"|\"draw\"} isCollision\r\n   */\r\n  hasCollisions = () => {\r\n    if (this.headCollision()) {\r\n      return this.getCurrentLooser();\r\n    }\r\n\r\n    //collision with self\r\n    for (let p = 0; p < this.players.length; p++) {\r\n      let player = this.players[p];\r\n      let otherPlayer = this.getOtherPlayer(player);\r\n      // if (this.state[player].positions.length < 4) return false;\r\n      for (let i = 1; i < this.state[player].positions.length; i++) {\r\n        if (\r\n          this.state[player].positions[i].x ===\r\n            this.state[player].positions[0].x &&\r\n          this.state[player].positions[i].y ===\r\n            this.state[player].positions[0].y\r\n        ) {\r\n          return player;\r\n        }\r\n        if (\r\n          this.state[otherPlayer].positions[0].x ===\r\n            this.state[player].positions[i].x &&\r\n          this.state[otherPlayer].positions[0].y ===\r\n            this.state[player].positions[i].y\r\n        ) {\r\n          return otherPlayer;\r\n        }\r\n      }\r\n    }\r\n\r\n    //collision with other\r\n\r\n    return \"none\";\r\n  };\r\n\r\n  /**\r\n   * Updates tail position\r\n   * @private\r\n   */\r\n  updateTail = (player) => {\r\n    this.state[player].positions = this.state[player].positions.map(\r\n      (position, index) => {\r\n        //skipping head in update\r\n        if (index === 0) {\r\n          return position;\r\n        }\r\n        return { ...this.state[player].positions[index - 1] };\r\n      }\r\n    );\r\n  };\r\n\r\n  moveUp = (player) => {\r\n    this.updateTail(player);\r\n    if (\r\n      this.state[player].positions[0].y - this.state[player].speed >=\r\n      TOP_BORDER\r\n    ) {\r\n      this.state[player].positions[0].y -= this.state[player].speed;\r\n    } else {\r\n      this.state[player].positions[0].y = BOTTOM_BORDER - PLAYER_SIZE;\r\n    }\r\n  };\r\n\r\n  moveDown = (player) => {\r\n    this.updateTail(player);\r\n    if (\r\n      this.state[player].positions[0].y + this.state[player].speed <=\r\n      BOTTOM_BORDER - this.state[player].speed\r\n    ) {\r\n      this.state[player].positions[0].y += this.state[player].speed;\r\n    } else {\r\n      this.state[player].positions[0].y = TOP_BORDER;\r\n    }\r\n  };\r\n\r\n  moveLeft = (player) => {\r\n    this.updateTail(player);\r\n    if (\r\n      this.state[player].positions[0].x - this.state[player].speed >=\r\n      LEFT_BORDER\r\n    ) {\r\n      this.state[player].positions[0].x -= this.state[player].speed;\r\n    } else {\r\n      this.state[player].positions[0].x = RIGHT_BORDER - PLAYER_SIZE;\r\n    }\r\n  };\r\n\r\n  moveRight = (player) => {\r\n    this.updateTail(player);\r\n    if (\r\n      this.state[player].positions[0].x + this.state[player].speed <=\r\n      RIGHT_BORDER - this.state[player].speed\r\n    ) {\r\n      this.state[player].positions[0].x += this.state[player].speed;\r\n    } else {\r\n      this.state[player].positions[0].x = LEFT_BORDER;\r\n    }\r\n  };\r\n\r\n  autoMove = () => {\r\n    this.players.forEach((player) => {\r\n      switch (this.state[player].direction) {\r\n        case DIRECTIONS.RIGHT:\r\n          this.moveRight(player);\r\n          break;\r\n        case DIRECTIONS.LEFT:\r\n          this.moveLeft(player);\r\n          break;\r\n        case DIRECTIONS.UP:\r\n          this.moveUp(player);\r\n          break;\r\n        case DIRECTIONS.DOWN:\r\n          this.moveDown(player);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  gameTimer;\r\n\r\n  pauseGame = () => {\r\n    clearInterval(this.gameTimer);\r\n    this.state.gameStatus = GAME_STATE.PAUSE;\r\n  };\r\n\r\n  startGame = (seed) => {\r\n    this.state.gameStatus = GAME_STATE.PLAY;\r\n    clearInterval(this.gameTimer);\r\n    this.gameTimer = setInterval(this.update, 200);\r\n    this.seed = seed;\r\n    seedrandom(seed);\r\n    this.generateFoodPosition();\r\n  };\r\n\r\n  continueGame = () => {\r\n    this.state.gameStatus = GAME_STATE.PLAY;\r\n    clearInterval(this.gameTimer);\r\n    this.gameTimer = setInterval(this.update, 200);\r\n  };\r\n\r\n  getCurrentLooser = () => {\r\n    if (\r\n      this.state.player.positions.length > this.state.player2.positions.length\r\n    ) {\r\n      return \"player2\";\r\n    } else if (\r\n      this.state.player.positions.length < this.state.player2.positions.length\r\n    ) {\r\n      return \"player\";\r\n    } else {\r\n      return \"draw\";\r\n    }\r\n  };\r\n\r\n  stopGame = () => {\r\n    this.state.gameStatus = GAME_STATE.STOP;\r\n    clearInterval(this.gameTimer);\r\n    const result = this.getCurrentLooser();\r\n    this.state.winner =\r\n      result === \"draw\" ? result : this.getOtherPlayer(result);\r\n  };\r\n\r\n  getPlayersLength = () => {\r\n    return {\r\n      p1: this.state.player.positions.length - 1,\r\n      p2: this.state.player2.positions.length - 1,\r\n    };\r\n  };\r\n\r\n  restartGame = () => {\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    clearInterval(this.gameTimer);\r\n    this.state = { ...JSON.parse(JSON.stringify(this.initialState)) };\r\n    // this.generateFoodPosition();\r\n  };\r\n\r\n  /**\r\n   * Simple funciton to update game state\r\n   */\r\n  update = () => {\r\n    if (this.state.gameStatus === GAME_STATE.PLAY) {\r\n      let result = this.hasCollisions();\r\n      if (result !== \"none\") {\r\n        this.state.gameStatus = GAME_STATE.STOP;\r\n        if (result === \"draw\") {\r\n          this.state.winner = \"draw\";\r\n        } else {\r\n          this.state.winner = this.getOtherPlayer(result);\r\n        }\r\n      }\r\n      this.autoMove();\r\n      this.draw();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @returns {GameStatus} gamestatus\r\n   */\r\n  getStatus = () => this.state.gameStatus;\r\n\r\n  /**\r\n   * @returns {number} current points\r\n   */\r\n  getPoints = () => this.state.currentPoints;\r\n\r\n  getRandomCirclePosition(max) {\r\n    let rand = 0;\r\n    do {\r\n      rand = Math.floor(Math.floor(Math.random() * Math.floor(max)));\r\n    } while (rand % 10 !== 5);\r\n    return rand;\r\n  }\r\n\r\n  eatFood = () => {\r\n    this.players.forEach((player) => {\r\n      if (\r\n        this.state[player].positions[0].x ===\r\n          this.state.food.x - PLAYER_SIZE / 2 &&\r\n        this.state[player].positions[0].y ===\r\n          this.state.food.y - PLAYER_SIZE / 2\r\n      ) {\r\n        this.generateFoodPosition();\r\n        this.state[player].positions = [\r\n          ...this.state[player].positions,\r\n          { x: RIGHT_BORDER, y: BOTTOM_BORDER },\r\n        ];\r\n        this.state.currentPoints++;\r\n      }\r\n    });\r\n  };\r\n\r\n  foodInSnake = () => {\r\n    for (let p = 0; p < this.players.length; p++) {\r\n      let player = this.players[p];\r\n      for (let i = 0; i < this.state[player].positions.length; i++) {\r\n        if (\r\n          this.state[player].positions[i].x === this.state.food.x &&\r\n          this.state[player].positions[i].y === this.state.food.y\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  getWinner = () => {\r\n    return this.state.winner;\r\n  };\r\n\r\n  generateFoodPosition = () => {\r\n    do {\r\n      this.state.food.x = this.getRandomCirclePosition(RIGHT_BORDER);\r\n      this.state.food.y = this.getRandomCirclePosition(BOTTOM_BORDER);\r\n    } while (this.foodInSnake());\r\n  };\r\n\r\n  drawFood = () => {\r\n    let circle = new Path2D();\r\n    circle.arc(this.state.food.x, this.state.food.y, PLAYER_SIZE / 2, 0, 360);\r\n    this.ctx.fillStyle = \"red\";\r\n    this.ctx.fill(circle);\r\n  };\r\n\r\n  drawPlayer = () => {\r\n    this.players.forEach((player) => {\r\n      let rectangle = new Path2D();\r\n      this.state[player].positions.forEach((position) => {\r\n        this.ctx.fillStyle = this.state[player].color;\r\n        rectangle.rect(position.x, position.y, PLAYER_SIZE, PLAYER_SIZE);\r\n        this.ctx.fill(rectangle);\r\n      });\r\n    });\r\n  };\r\n\r\n  draw = () => {\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    this.drawPlayer();\r\n    this.eatFood();\r\n    this.drawFood();\r\n  };\r\n\r\n  changeDirection = (player, direction) => {\r\n    switch (direction) {\r\n      case DIRECTIONS.UP:\r\n        if (this.state[player].direction !== DIRECTIONS.DOWN) {\r\n          this.state[player].direction = direction;\r\n        }\r\n        break;\r\n      case DIRECTIONS.DOWN:\r\n        if (this.state[player].direction !== DIRECTIONS.UP) {\r\n          this.state[player].direction = direction;\r\n        }\r\n        break;\r\n      case DIRECTIONS.LEFT:\r\n        if (this.state[player].direction !== DIRECTIONS.RIGHT) {\r\n          this.state[player].direction = direction;\r\n        }\r\n        break;\r\n      case DIRECTIONS.RIGHT:\r\n        if (this.state[player].direction !== DIRECTIONS.LEFT) {\r\n          this.state[player].direction = direction;\r\n        }\r\n        break;\r\n      default:\r\n        this.state[player].direction = direction;\r\n    }\r\n  };\r\n}\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport keys from \"./keycodes.js\";\r\nimport { Snake } from \"./snake\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport { DIRECTIONS, GAME_STATE } from \"./constants\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io(\"https://95f18594e8f8.ngrok.io\");\r\n// const socket = io(\"http://localhost:8080\");\r\n\r\nlet game = new Snake();\r\n\r\nconst Canvas = (props) => {\r\n  const [player, setCurrentPlayer] = useState(\"player\");\r\n  const [winner, setWinner] = useState(game.getWinner());\r\n  const [gameStatus, setGameStatus] = useState(game.getStatus());\r\n  const [time, setTime] = useState(60);\r\n  const [timerStatus, setTimerStatus] = useState(false);\r\n  const [points, setPoints] = useState(game.getPlayersLength());\r\n  const canvasRef = useRef(null);\r\n\r\n  //action emmiter\r\n  useEffect(() => {\r\n    socket.on(\"action\", ({ player, direction }) => {\r\n      game.changeDirection(player, direction);\r\n    });\r\n\r\n    socket.on(\"start\", ({ message, seed }) => {\r\n      console.log(message);\r\n      setTimerStatus(true);\r\n      game.startGame();\r\n    });\r\n\r\n    socket.on(\"pause\", (message) => {\r\n      console.log(message);\r\n      setTimerStatus(false);\r\n      game.pauseGame();\r\n    });\r\n\r\n    socket.on(\"reset\", (message) => {\r\n      console.log(message);\r\n      setTime(60);\r\n      setTimerStatus(false);\r\n      game.restartGame();\r\n    });\r\n\r\n    socket.on(\"continue\", (message) => {\r\n      console.log(message);\r\n      setTimerStatus(true);\r\n      game.continueGame();\r\n    });\r\n\r\n    return () => {\r\n      socket.removeListener(\"action\");\r\n      socket.removeListener(\"start\");\r\n      socket.removeListener(\"pause\");\r\n      socket.removeListener(\"continue\");\r\n      socket.removeListener(\"reset\");\r\n    };\r\n  }, []);\r\n\r\n  //ending game by timer\r\n  useEffect(() => {\r\n    if (winner !== \"none\") {\r\n      setTimerStatus(false);\r\n    }\r\n  }, [winner]);\r\n\r\n  const startGame = () => {\r\n    socket.emit(\"start\", { message: `${player} started`, seed: Math.random() });\r\n  };\r\n\r\n  const pauseGame = () => {\r\n    socket.emit(\"pause\", `${player} paused`);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    socket.emit(\"reset\", `${player} reseted`);\r\n  };\r\n\r\n  const continueGame = () => {\r\n    socket.emit(\"continue\", `${player} continued`);\r\n  };\r\n\r\n  //countdown\r\n  useEffect(() => {\r\n    let timer1 = setInterval(() => {\r\n      if (timerStatus && time > 0) {\r\n        setTime(time - 1);\r\n      }\r\n      if (time === 0) {\r\n        game.stopGame();\r\n        setTimerStatus(false);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer1);\r\n    };\r\n  }, [timerStatus, time]);\r\n\r\n  //sync with game\r\n  useEffect(() => {\r\n    let timer2 = setInterval(() => {\r\n      setWinner(game.getWinner());\r\n      setPoints(game.getPlayersLength());\r\n      setGameStatus(game.getStatus());\r\n    }, 200);\r\n\r\n    return () => {\r\n      clearInterval(timer2);\r\n    };\r\n  }, []);\r\n\r\n  const changePlayer = (e) => {\r\n    if (player === \"player\") {\r\n      setCurrentPlayer(\"player2\");\r\n    } else {\r\n      setCurrentPlayer(\"player\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    game.initialize(ctx);\r\n  }, []);\r\n\r\n  const keyHandler = (key, e) => {\r\n    switch (e.keyCode) {\r\n      case keys.w:\r\n      case keys.arrowUp:\r\n        // game.changeDirection(player, DIRECTIONS.UP);\r\n        socket.emit(\"action\", { player, direction: DIRECTIONS.UP });\r\n        break;\r\n      case keys.a:\r\n      case keys.arrowLeft:\r\n        // game.changeDirection(player, DIRECTIONS.LEFT);\r\n        socket.emit(\"action\", { player, direction: DIRECTIONS.LEFT });\r\n        break;\r\n      case keys.d:\r\n      case keys.arrowRight:\r\n        // game.changeDirection(player, DIRECTIONS.RIGHT);\r\n        socket.emit(\"action\", { player, direction: DIRECTIONS.RIGHT });\r\n        break;\r\n      case keys.s:\r\n      case keys.arrowDown:\r\n        // game.changeDirection(player, DIRECTIONS.DOWN);\r\n        socket.emit(\"action\", { player, direction: DIRECTIONS.DOWN });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renderActionButton = () => {\r\n    if (gameStatus === GAME_STATE.PLAY) {\r\n      <button onClick={pauseGame}>Pause</button>;\r\n    } else if (gameStatus === GAME_STATE.PAUSE) {\r\n      <button onClick={continueGame}>Continue</button>;\r\n    }\r\n    return <button onClick={startGame}>Start</button>;\r\n  };\r\n  return (\r\n    <>\r\n      <KeyboardEventHandler\r\n        handleKeys={[\"w\", \"a\", \"s\", \"d\"]}\r\n        onKeyEvent={keyHandler}\r\n        handleEventType=\"keydown\"\r\n      />\r\n      <div className=\"game-container\">\r\n        <div>\r\n          <p>{points ? `${points.p1} ${player} ${points.p2}` : player}</p>\r\n          <p>Winner: {winner !== \"none\" ? winner : \"\"}</p>\r\n          <p>{time}</p>\r\n          {renderActionButton()}\r\n          <button onClick={resetGame}>Reset</button>\r\n          <button onClick={changePlayer}>changePlayer</button>\r\n        </div>\r\n        <div>\r\n          <canvas ref={canvasRef} {...props} id=\"canvas\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import \"./App.css\";\n// import { Snake } from \"./snake\";\nimport Canvas from \"./Canvas\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas width=\"250\" height=\"250\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}